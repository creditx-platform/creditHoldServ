-- Sequences
CREATE SEQUENCE CHS_HOLD_SEQ START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CHS_OUTBOX_SEQ START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CHS_PROC_SEQ START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;

-- Tables
CREATE TABLE CHS_HOLDS (
    HOLD_ID        NUMBER(19) PRIMARY KEY,
    TRANSACTION_ID NUMBER(19) NOT NULL,
    ACCOUNT_ID     NUMBER(19) NOT NULL,
    AMOUNT         NUMBER(20,2) NOT NULL,
    STATUS         VARCHAR2(20) NOT NULL CHECK (STATUS IN ('AUTHORIZED','CAPTURED','VOIDED','EXPIRED')),
    CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    EXPIRES_AT     TIMESTAMP NOT NULL
);

CREATE TABLE CHS_OUTBOX_EVENTS (
    EVENT_ID     NUMBER(19) PRIMARY KEY,
    EVENT_TYPE   VARCHAR2(100) NOT NULL,
    AGGREGATE_ID NUMBER(19),
    PAYLOAD      CLOB NOT NULL,
    STATUS       VARCHAR2(20) DEFAULT 'PENDING' NOT NULL CHECK (STATUS IN ('PENDING','PUBLISHED','FAILED')),
    CREATED_AT   TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    PUBLISHED_AT TIMESTAMP
);

CREATE TABLE CHS_PROCESSED_EVENTS (
    EVENT_ID     VARCHAR2(100) PRIMARY KEY,
    PAYLOAD_HASH VARCHAR2(128),
    STATUS       VARCHAR2(20),
    PROCESSED_AT TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

-- Triggers
CREATE OR REPLACE TRIGGER BI_CHS_HOLDS
BEFORE INSERT ON CHS_HOLDS
FOR EACH ROW
WHEN (NEW.HOLD_ID IS NULL)
BEGIN
    :NEW.HOLD_ID := CHS_HOLD_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_CHS_HOLDS_UPD
BEFORE UPDATE ON CHS_HOLDS
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER BI_CHS_OUTBOX_EVENTS
BEFORE INSERT ON CHS_OUTBOX_EVENTS
FOR EACH ROW
WHEN (NEW.EVENT_ID IS NULL)
BEGIN
    :NEW.EVENT_ID := CHS_OUTBOX_SEQ.NEXTVAL;
END;
/

-- Indexes
CREATE INDEX IDX_CHS_HOLDS_ACCOUNT_STATUS ON CHS_HOLDS(ACCOUNT_ID, STATUS);
CREATE INDEX IDX_CHS_HOLDS_TRANSACTION ON CHS_HOLDS(TRANSACTION_ID);
CREATE INDEX IDX_CHS_OUTBOX_STATUS ON CHS_OUTBOX_EVENTS(STATUS);
CREATE INDEX IDX_CHS_OUTBOX_AGGREGATE_ID ON CHS_OUTBOX_EVENTS(AGGREGATE_ID);
CREATE INDEX IDX_CHS_PROC_STATUS ON CHS_PROCESSED_EVENTS(STATUS);